Explanation of the major aspects of the project
~Database: 
Using Django's built in sqlite3 database, we added some packages like django_cron, social-auth-app-django, and its dependencies and made models that would add additional tables. Tables of interest are: 
- FoodAPI_weather which is where we store the cached forecasts
- FoodAPI_profile which is a table with a OneToOne relation with the User model in auth_user and stores dietary restrictions (made using Profile model)
- auth_user is where we store all the user's information including username, password, and email
- social_auth_usersocialauth which is where info on users who logged in using social authentication is stored
~Authentication:
Based off of Django's built in UserCreationForm, I modified it in SignUpForm to add extra fields and a Meta class. In views.py, the function that allow users to sign in and login are signup(). In there, I simply accessed form, saved form once fields are valid and save the dietary restriction information in Profile table. Logging in using Facebook was implemented with the help of social_auth_app_django.
~Recipes Algorithm
The core of our project is the recipes function in views.py which takes a zip code from user input and produces randomizes recipe based on our algorithm. First, once user has inputted a zipcode, we check if it has been cached, if it has, we simply pull up the information. Otherwise, we call the weather API. Then our algorithm takes the weather information, and using factors such as dietary preferences, average temperature, seasons, time, and forecast (e.g. snow, rain), calculates an appropriate list of food and randomly gives you a recipe containing food from the food list. The recipes are displayed in a table for 5 days in advance (in case you plan on buying groceries and making lunches in advance).


Plans for a future version
If we had had more time or more experience, we would have implemented some more features that we originally wanted but were unable to get to. These are plans for a future version:
- First of all, our app is not on a live server, which would be really cool if we could do. We didn't want to spend any money or have to figure out this additional step since it wasn't necessary for completion.
- Second, we would like to  allow users to add the ingredients from each recipe into a list, so that they can have a list that is generated by the app that contains all of their necessary ingredients. 
We feel as if this would make the app more of a full product, as it allows you to get all the way to the final requirement for grocery shopping within the app, which is a list of what you're actually going to buy. 
Currently, you have to copy and paste the ingredients if you want them, which isn't as good as having the app do it for you.
- We would also like to implement a way for users to save recipes that they liked, so they can click on something like a "favorite recipes" button and see all of the recipes that they liked.
- Lastly, we would like to include filtering for different cuisines, instead of just dietary restrictions. Things like "mexican" or "italian" would be useful to allow users to get the most out of the app based on their cravings.

Planning and assigning tasks
Our team primarily used google docs as a way to keep track of all our tasks. We communicated through a Facebook group to set up things like meetings or talk about what else needed to be done. When we had meetings, we assigned tasks to different team mates
depending on their skillset. Link to one of our google docs as an example:
https://docs.google.com/document/d/1G8cZnxkJ0SofauN4vVWsEap_rh1oIXSCJN9ymJgXfc0/edit

*Testing*
We tested our final product essentially by trying to break it by going down an unhappy path. After we thought we had working fields, we would try and input unexpected inputs into each field to see if we could somehow cause bugs in things like the auth or the recipe search. 
We found a few bugs like this, for example if a user just tried to search without entering a zip code, it would cause an error, so we had to fix things like that.

One thing that we struggled with but are particularly proud of is the loading bar that appears when searching for recipes. We noticed that the search was taking about 8 seconds to complete because of the lag from the API request. So, based on what we learned from class
about doing something if you know the user is going to have to wait, we implemented the loading bar that should distract the user for long enough to make the wait bearable. Its only an 8-10 second wait, so we didn't include anything more distracting because it doesn't 
actually take that long, and the loading bar is satisfying to look at.

Overall, the project went pretty well, we did a good job of planning ahead of time and keeping on task so we felt prepared the whole way through. We ran into some issues with estimating how long things would take; for example, auth turned out to be much harder than we thought
it would be, so some people ended up working for longer than others did after we had planned tasks. Overall though, we feel like we did a good job, since we came into this with no experience with Django or how to make a web app.
